#!/usr/bin/env node
/**
 * Enhanced Natural Language Orchestrator Interface
 * Integrates with existing 33-agent system for comprehensive orchestration
 */

import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import path from 'path';
import fs from 'fs';
import { glob } from 'glob';
import { MultiPRDOrchestrator } from './lib/orch/multi-prd-orchestrator.mjs';
import { SequentialWorkflowRunner } from './lib/orch/sequential-workflow-runner.mjs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Get user input
const userInput = process.argv.slice(2).join(' ').toLowerCase();

// Enhanced command mappings integrated with 33-agent system
const commandMappings = {
  // View commands
  'view pending approvals': ['lib/orch-agents.mjs', 'pending'],
  'show pending approvals': ['lib/orch-agents.mjs', 'pending'],
  'list pending approvals': ['lib/orch-agents.mjs', 'pending'],
  'view agents': ['lib/orch-agents.mjs', 'list'],
  'show agents': ['lib/orch-agents.mjs', 'list'],
  'list agents': ['lib/orch-agents.mjs', 'list'],
  'agent status': ['lib/orch-agents.mjs', 'status'],
  'show agent status': ['lib/orch-agents.mjs', 'status'],
  
  // Task breakdown with agents
  'see task breakdown': (input) => {
    const idMatch = input.match(/\b(\d+\.\d+\.\d+\.\d+\.\d+\.\d+)\b/);
    if (idMatch) {
      return ['lib/task-decomposer.mjs', '--id', idMatch[1], '--with-agents'];
    }
    console.log('Please specify an ID. Example: "see task breakdown 1.1.1.1.0.0"');
    process.exit(1);
  },
  
  // Approval commands with agent review
  'approve': (input) => {
    const idMatch = input.match(/\b(\d+\.\d+\.\d+\.\d+\.\d+\.\d+)\b/);
    if (idMatch) {
      return ['lib/orch-agents.mjs', 'approve', '--id', idMatch[1]];
    }
    console.log('Please specify an ID. Example: "approve 1.1.1.1.0.0"');
    process.exit(1);
  },
  
  'reject': (input) => {
    const idMatch = input.match(/\b(\d+\.\d+\.\d+\.\d+\.\d+\.\d+)\b/);
    if (idMatch) {
      return ['lib/orch-agents.mjs', 'reject', '--id', idMatch[1]];
    }
    console.log('Please specify an ID. Example: "reject 1.1.1.1.0.0"');
    process.exit(1);
  },
  
  // Start feature with agents (default)
  'start feature': (input) => {
    const idMatch = input.match(/\b(\d+\.\d+\.\d+\.\d+\.\d+\.\d+)\b/);
    if (idMatch) {
      return ['lib/orch-start-real.mjs', '--id', idMatch[1]];
    }
    console.log('Please specify an ID. Example: "start feature 1.1.1.1.0.0"');
    process.exit(1);
  },
  
  // Start without agents
  'start manual': (input) => {
    const idMatch = input.match(/\b(\d+\.\d+\.\d+\.\d+\.\d+\.\d+)\b/);
    if (idMatch) {
      return ['lib/orch-start-real.mjs', '--id', idMatch[1], '--manual'];
    }
    console.log('Please specify an ID. Example: "start manual 1.1.1.1.0.0"');
    process.exit(1);
  },
  
  // Agent team review
  'team review': (input) => {
    const idMatch = input.match(/\b(\d+\.\d+\.\d+\.\d+\.\d+\.\d+)\b/);
    if (idMatch) {
      return ['lib/orch-agents.mjs', 'review', '--id', idMatch[1], '--all-agents'];
    }
    console.log('Please specify an ID. Example: "team review 1.1.1.1.0.0"');
    process.exit(1);
  },
  
  // Scaffold with agent assignments
  'create feature': () => ['lib/scaffold-feature.mjs'],
  'new feature': () => ['lib/scaffold-feature.mjs'],
  
  // System commands
  'check system': () => ['lib/preflight-check.mjs'],
  'system health': () => ['lib/preflight-check.mjs'],
  'show status': () => ['lib/status-dashboard.mjs'],
  'system status': () => ['lib/status-dashboard.mjs'],
  'dashboard': () => ['lib/status-dashboard.mjs'],
  
  // Batch operations with agents
  'batch start': (input) => {
    const ids = input.match(/\d+\.\d+\.\d+\.\d+\.\d+\.\d+/g);
    if (ids && ids.length > 0) {
      return ['lib/batch-operations.mjs', ...ids];
    }
    console.log('Please specify IDs. Example: "batch start 1.1.1.1.0.0 1.1.2.1.0.0"');
    process.exit(1);
  },
  
  // Interactive wizard
  'wizard': () => ['lib/interactive-setup.mjs'],
  'setup': () => ['lib/interactive-setup.mjs'],
  'interactive': () => ['lib/interactive-setup.mjs'],
  
  // Agent-specific commands
  'assign agents': (input) => {
    const idMatch = input.match(/\b(\d+\.\d+\.\d+\.\d+\.\d+\.\d+)\b/);
    if (idMatch) {
      return ['lib/orch-agents.mjs', 'assign', '--id', idMatch[1]];
    }
    return ['lib/orch-agents.mjs', 'assign'];
  },
  
  'run agents': (input) => {
    const idMatch = input.match(/\b(\d+\.\d+\.\d+\.\d+\.\d+\.\d+)\b/);
    if (idMatch) {
      return ['lib/orch-agents.mjs', 'workflow', '--id', idMatch[1]];
    }
    console.log('Please specify an ID. Example: "run agents 1.1.1.1.0.0"');
    process.exit(1);
  },
  
  // Multi-PRD Workflow command (special handling needed)
  'workflow': 'WORKFLOW_COMMAND',
  'workflow sequential': 'SEQUENTIAL_WORKFLOW_COMMAND',

  // Help command
  'help': () => {
    console.log(`
🚀 ORCH Natural Language Interface with 33 Agents

📋 View Commands:
  - "view agents" or "list agents" - Show all 33 available agents
  - "agent status" - Show current agent activities
  - "view pending approvals" - Show features awaiting approval
  - "see task breakdown 1.1.1.1.0.0" - View decomposed tasks with agent assignments

🎯 Action Commands:
  - "start feature 1.1.1.1.0.0" - Start with automatic agent assignment
  - "start manual 1.1.1.1.0.0" - Start without agents
  - "workflow <description>" - Execute multiple PRDs with natural language (parallel)
  - "workflow sequential <description>" - Execute multiple PRDs sequentially (recommended)
  - "team review 1.1.1.1.0.0" - Get all 33 agents to review
  - "approve 1.1.1.1.0.0" - Approve feature with agent validation
  - "reject 1.1.1.1.0.0" - Reject feature with agent feedback
  - "create feature" - Interactive wizard to create new feature

🤖 Agent Commands:
  - "assign agents 1.1.1.1.0.0" - Manually assign agents to feature
  - "run agents 1.1.1.1.0.0" - Execute agent workflow
  - "batch start 1.1.1.1 1.1.2.1" - Process multiple features with agents

🛠️ System Commands:
  - "check system" or "system health" - Run pre-flight checks
  - "show status" or "dashboard" - System dashboard with agent metrics
  - "wizard" or "setup" - Interactive setup wizard

📚 Traditional Commands:
  - orch start --id <ID> (with agents by default)
  - orch start --id <ID> --manual (without agents)
  - orch scaffold --id <ID> --title <TITLE>
  - orch agents list
  - orch agents status
  - orch agents assign --id <ID>

💡 Examples:
  - "start feature 1.1.1.1.0.0" - Starts with 6-8 agents auto-assigned
  - "team review 1.1.1.1.0.0" - Gets review from all 33 agents
  - "workflow sequential run 1.1.3.3 and then 1.1.3.4" - Sequential execution (recommended)
  - "workflow 'run 1.1.2.1, 1.1.2.2, 1.1.2.3 together then 1.1.2.4'" - Parallel execution
  - "create feature" - Launches wizard with agent recommendations

🤖 Available Agents (33 total):
  Leadership: CTO, Chief AI Officer, VP Engineering, VP Product
  Product: Product Manager, AI Product Manager, Technical PM
  Engineering: Frontend, Backend, Full-Stack, Staff Engineer
  AI/ML: AI Engineer, ML Engineer, Data Scientist, MLOps Engineer
  Security: CISO, Security Architect, Application Security, AI Safety
  Quality: QA Engineer, QA Automation, Site Reliability
  Data: Data Engineer, Data Analyst, Business Analyst
  Design: UX/UI Designer, UX Researcher
  And more specialized roles...

Type "view agents" to see the complete list with descriptions.
`);
    process.exit(0);
  }
};

// Function to find matching command
function findCommand(input) {
  // Check for exact matches first
  for (const [pattern, handler] of Object.entries(commandMappings)) {
    if (input.includes(pattern)) {
      return typeof handler === 'function' ? handler(input) : handler;
    }
  }
  
  // Check for partial matches
  if (input.includes('help') || input === '') {
    return commandMappings['help']();
  }
  
  // Check if it's a traditional command format
  if (input.startsWith('--') || input.includes('--id')) {
    // Pass through to orch-start-real.mjs with agents by default
    return ['lib/orch-start-real.mjs', ...process.argv.slice(2)];
  }
  
  return null;
}

// Main execution
async function main() {
  // Check if user passed "start" with a PRD filename or path
  if (process.argv[2] === 'start' && process.argv[3] && !process.argv[3].startsWith('--')) {
    const prdArg = process.argv[3];
    
    // Extract ID from PRD filename or path (handles both absolute and relative paths)
    // Examples: PRD-1.1.1.2-users-table.md, /app/PRDs/M0/1.1/Phase-1-Independent/PRD-1.1.1.2-users-table.md
    const idMatch = prdArg.match(/PRD-(\d+(?:\.\d+)+)/i) || 
                    prdArg.match(/(\d+(?:\.\d+)+)/);
    if (idMatch) {
      const extractedId = idMatch[1];
      
      // Find the full PRD path if only filename was provided
      let fullPrdPath = prdArg;
      if (!prdArg.includes('/')) {
        // If it's just a filename, find the full path
        const matches = glob.sync(`**/PRD-${extractedId}*.md`, { 
          cwd: path.join(__dirname, '..'),
          absolute: true 
        });
        if (matches.length > 0) {
          fullPrdPath = matches[0];
        }
      } else if (!path.isAbsolute(prdArg)) {
        // Convert relative path to absolute
        fullPrdPath = path.resolve(prdArg);
      }
      
      console.log(`\n🚀 Starting ORCH Orchestration System`);
      console.log(`📋 Feature: ${extractedId}`);
      console.log(`📄 PRD: ${fullPrdPath}`);
      console.log(`🤖 Invoking 33 AI agents to collaborate on implementation...`);
      console.log(`⚡ Mode: Autonomous with Do-It-Fully policy`);
      console.log(`\n${'═'.repeat(60)}\n`);
      
      // Use orch-start.mjs which handles the full orchestration with agents
      const scriptPath = path.join(__dirname, 'lib/orch-start.mjs');
      const child = spawn('node', [scriptPath, '--prd-path', fullPrdPath, '--autonomous'], { 
        stdio: 'inherit',
        cwd: __dirname
      });
      
      child.on('exit', (code) => process.exit(code || 0));
      return;
    }
  }
  
  // Special handling for workflow commands
  if (userInput.startsWith('workflow sequential')) {
    const runner = new SequentialWorkflowRunner();
    const description = process.argv.slice(2).join(' ').replace(/^workflow\s+sequential\s*/i, '');
    console.log(`🔄 Using simplified sequential approach (based on your working command)`);
    await runner.executeSequentialWorkflow(description);
    return;
  }
  
  if (userInput.startsWith('workflow')) {
    const orchestrator = new MultiPRDOrchestrator();
    const description = process.argv.slice(2).join(' ').replace(/^workflow\s*/i, '');
    console.log(`⚠️  Using complex parallel approach (may timeout - consider 'workflow sequential' instead)`);
    await orchestrator.executeWorkflow(description);
    return;
  }
  
  const command = findCommand(userInput);
  
  if (!command) {
    console.log(`❓ Didn't understand: "${userInput}"`);
    console.log('Type "help" to see available commands.');
    process.exit(1);
  }
  
  // If help was called, it already exited
  if (!command || command.length === 0) {
    process.exit(0);
  }
  
  // Handle special workflow command markers
  if (command === 'SEQUENTIAL_WORKFLOW_COMMAND') {
    const runner = new SequentialWorkflowRunner();
    const description = process.argv.slice(2).join(' ').replace(/^workflow\s+sequential\s*/i, '');
    console.log(`🔄 Using simplified sequential approach (based on your working command)`);
    await runner.executeSequentialWorkflow(description);
    return;
  }
  
  if (command === 'WORKFLOW_COMMAND') {
    const orchestrator = new MultiPRDOrchestrator();
    const description = process.argv.slice(2).join(' ').replace(/^workflow\s*/i, '');
    console.log(`⚠️  Using complex parallel approach (may timeout - consider 'workflow sequential' instead)`);
    await orchestrator.executeWorkflow(description);
    return;
  }
  
  // Execute the command
  const [script, ...args] = command;
  const scriptPath = path.join(__dirname, script);
  
  // Check if script exists, if not try to use a fallback
  if (!fs.existsSync(scriptPath)) {
    console.log(`⚠️  ${script} not yet implemented. Using available alternative...`);
    
    // Fallback mappings for missing scripts
    const fallbacks = {
      'lib/scaffold-feature.mjs': 'lib/orch-start-real.mjs',
      'lib/interactive-setup.mjs': 'lib/orch-agents.mjs',
      'lib/status-dashboard.mjs': 'lib/orch-agents.mjs',
      'lib/preflight-check.mjs': 'scripts/health-check.mjs',
      'lib/batch-operations.mjs': 'lib/orch-start-real.mjs',
      'lib/task-decomposer.mjs': 'lib/orch-agents.mjs'
    };
    
    const fallback = fallbacks[script];
    if (fallback) {
      const fallbackPath = path.join(__dirname, fallback);
      if (fs.existsSync(fallbackPath)) {
        console.log(`Using: ${fallback}`);
        const child = spawn('node', [fallbackPath, ...args], { 
          stdio: 'inherit',
          cwd: __dirname
        });
        
        child.on('exit', (code) => process.exit(code || 0));
        return;
      }
    }
    
    console.log(`❌ Feature not available yet.`);
    process.exit(1);
  }
  
  const child = spawn('node', [scriptPath, ...args], { 
    stdio: 'inherit',
    cwd: __dirname
  });
  
  child.on('exit', (code) => process.exit(code || 0));
}

// Handle errors
process.on('unhandledRejection', (err) => {
  console.error('Error:', err);
  process.exit(1);
});

// Run if not help
if (!userInput || userInput === 'help' || userInput === '--help' || userInput === '-h') {
  commandMappings.help();
} else {
  main().catch(err => {
    console.error('Error:', err);
    process.exit(1);
  });
}