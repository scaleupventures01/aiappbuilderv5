#!/usr/bin/env node
/**
 * Enhanced Natural Language Orchestrator Interface
 * Integrates with existing 33-agent system for comprehensive orchestration
 */

import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import path from 'path';
import fs from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Get user input
const userInput = process.argv.slice(2).join(' ').toLowerCase();

// Enhanced command mappings integrated with 33-agent system
const commandMappings = {
  // View commands
  'view pending approvals': ['lib/orch-agents.mjs', 'pending'],
  'show pending approvals': ['lib/orch-agents.mjs', 'pending'],
  'list pending approvals': ['lib/orch-agents.mjs', 'pending'],
  'view agents': ['lib/orch-agents.mjs', 'list'],
  'show agents': ['lib/orch-agents.mjs', 'list'],
  'list agents': ['lib/orch-agents.mjs', 'list'],
  'agent status': ['lib/orch-agents.mjs', 'status'],
  'show agent status': ['lib/orch-agents.mjs', 'status'],
  
  // Task breakdown with agents
  'see task breakdown': (input) => {
    const idMatch = input.match(/\b(\d+\.\d+\.\d+\.\d+\.\d+\.\d+)\b/);
    if (idMatch) {
      return ['lib/task-decomposer.mjs', '--id', idMatch[1], '--with-agents'];
    }
    console.log('Please specify an ID. Example: "see task breakdown 1.1.1.1.0.0"');
    process.exit(1);
  },
  
  // Approval commands with agent review
  'approve': (input) => {
    const idMatch = input.match(/\b(\d+\.\d+\.\d+\.\d+\.\d+\.\d+)\b/);
    if (idMatch) {
      return ['lib/orch-agents.mjs', 'approve', '--id', idMatch[1]];
    }
    console.log('Please specify an ID. Example: "approve 1.1.1.1.0.0"');
    process.exit(1);
  },
  
  'reject': (input) => {
    const idMatch = input.match(/\b(\d+\.\d+\.\d+\.\d+\.\d+\.\d+)\b/);
    if (idMatch) {
      return ['lib/orch-agents.mjs', 'reject', '--id', idMatch[1]];
    }
    console.log('Please specify an ID. Example: "reject 1.1.1.1.0.0"');
    process.exit(1);
  },
  
  // Start feature with agents (default)
  'start feature': (input) => {
    const idMatch = input.match(/\b(\d+\.\d+\.\d+\.\d+\.\d+\.\d+)\b/);
    if (idMatch) {
      return ['lib/orch-start-real.mjs', '--id', idMatch[1]];
    }
    console.log('Please specify an ID. Example: "start feature 1.1.1.1.0.0"');
    process.exit(1);
  },
  
  // Start without agents
  'start manual': (input) => {
    const idMatch = input.match(/\b(\d+\.\d+\.\d+\.\d+\.\d+\.\d+)\b/);
    if (idMatch) {
      return ['lib/orch-start-real.mjs', '--id', idMatch[1], '--manual'];
    }
    console.log('Please specify an ID. Example: "start manual 1.1.1.1.0.0"');
    process.exit(1);
  },
  
  // Agent team review
  'team review': (input) => {
    const idMatch = input.match(/\b(\d+\.\d+\.\d+\.\d+\.\d+\.\d+)\b/);
    if (idMatch) {
      return ['lib/orch-agents.mjs', 'review', '--id', idMatch[1], '--all-agents'];
    }
    console.log('Please specify an ID. Example: "team review 1.1.1.1.0.0"');
    process.exit(1);
  },
  
  // Scaffold with agent assignments
  'create feature': () => ['lib/scaffold-feature.mjs'],
  'new feature': () => ['lib/scaffold-feature.mjs'],
  
  // System commands
  'check system': () => ['lib/preflight-check.mjs'],
  'system health': () => ['lib/preflight-check.mjs'],
  'show status': () => ['lib/status-dashboard.mjs'],
  'system status': () => ['lib/status-dashboard.mjs'],
  'dashboard': () => ['lib/status-dashboard.mjs'],
  
  // Batch operations with agents
  'batch start': (input) => {
    const ids = input.match(/\d+\.\d+\.\d+\.\d+\.\d+\.\d+/g);
    if (ids && ids.length > 0) {
      return ['lib/batch-operations.mjs', ...ids];
    }
    console.log('Please specify IDs. Example: "batch start 1.1.1.1.0.0 1.1.2.1.0.0"');
    process.exit(1);
  },
  
  // Interactive wizard
  'wizard': () => ['lib/interactive-setup.mjs'],
  'setup': () => ['lib/interactive-setup.mjs'],
  'interactive': () => ['lib/interactive-setup.mjs'],
  
  // Agent-specific commands
  'assign agents': (input) => {
    const idMatch = input.match(/\b(\d+\.\d+\.\d+\.\d+\.\d+\.\d+)\b/);
    if (idMatch) {
      return ['lib/orch-agents.mjs', 'assign', '--id', idMatch[1]];
    }
    return ['lib/orch-agents.mjs', 'assign'];
  },
  
  'run agents': (input) => {
    const idMatch = input.match(/\b(\d+\.\d+\.\d+\.\d+\.\d+\.\d+)\b/);
    if (idMatch) {
      return ['lib/orch-agents.mjs', 'workflow', '--id', idMatch[1]];
    }
    console.log('Please specify an ID. Example: "run agents 1.1.1.1.0.0"');
    process.exit(1);
  },
  
  // Help command
  'help': () => {
    console.log(`
🚀 ORCH Natural Language Interface with 33 Agents

📋 View Commands:
  - "view agents" or "list agents" - Show all 33 available agents
  - "agent status" - Show current agent activities
  - "view pending approvals" - Show features awaiting approval
  - "see task breakdown 1.1.1.1.0.0" - View decomposed tasks with agent assignments

🎯 Action Commands:
  - "start feature 1.1.1.1.0.0" - Start with automatic agent assignment
  - "start manual 1.1.1.1.0.0" - Start without agents
  - "team review 1.1.1.1.0.0" - Get all 33 agents to review
  - "approve 1.1.1.1.0.0" - Approve feature with agent validation
  - "reject 1.1.1.1.0.0" - Reject feature with agent feedback
  - "create feature" - Interactive wizard to create new feature

🤖 Agent Commands:
  - "assign agents 1.1.1.1.0.0" - Manually assign agents to feature
  - "run agents 1.1.1.1.0.0" - Execute agent workflow
  - "batch start 1.1.1.1 1.1.2.1" - Process multiple features with agents

🛠️ System Commands:
  - "check system" or "system health" - Run pre-flight checks
  - "show status" or "dashboard" - System dashboard with agent metrics
  - "wizard" or "setup" - Interactive setup wizard

📚 Traditional Commands:
  - orch start --id <ID> (with agents by default)
  - orch start --id <ID> --manual (without agents)
  - orch scaffold --id <ID> --title <TITLE>
  - orch agents list
  - orch agents status
  - orch agents assign --id <ID>

💡 Examples:
  - "start feature 1.1.1.1.0.0" - Starts with 6-8 agents auto-assigned
  - "team review 1.1.1.1.0.0" - Gets review from all 33 agents
  - "create feature" - Launches wizard with agent recommendations

🤖 Available Agents (33 total):
  Leadership: CTO, Chief AI Officer, VP Engineering, VP Product
  Product: Product Manager, AI Product Manager, Technical PM
  Engineering: Frontend, Backend, Full-Stack, Staff Engineer
  AI/ML: AI Engineer, ML Engineer, Data Scientist, MLOps Engineer
  Security: CISO, Security Architect, Application Security, AI Safety
  Quality: QA Engineer, QA Automation, Site Reliability
  Data: Data Engineer, Data Analyst, Business Analyst
  Design: UX/UI Designer, UX Researcher
  And more specialized roles...

Type "view agents" to see the complete list with descriptions.
`);
    process.exit(0);
  }
};

// Function to find matching command
function findCommand(input) {
  // Check for exact matches first
  for (const [pattern, handler] of Object.entries(commandMappings)) {
    if (input.includes(pattern)) {
      return typeof handler === 'function' ? handler(input) : handler;
    }
  }
  
  // Check for partial matches
  if (input.includes('help') || input === '') {
    return commandMappings['help']();
  }
  
  // Check if it's a traditional command format
  if (input.startsWith('--') || input.includes('--id')) {
    // Pass through to orch-start-real.mjs with agents by default
    return ['lib/orch-start-real.mjs', ...process.argv.slice(2)];
  }
  
  return null;
}

// Main execution
async function main() {
  const command = findCommand(userInput);
  
  if (!command) {
    console.log(`❓ Didn't understand: "${userInput}"`);
    console.log('Type "help" to see available commands.');
    process.exit(1);
  }
  
  // If help was called, it already exited
  if (!command || command.length === 0) {
    process.exit(0);
  }
  
  // Execute the command
  const [script, ...args] = command;
  const scriptPath = path.join(__dirname, script);
  
  // Check if script exists, if not try to use a fallback
  if (!fs.existsSync(scriptPath)) {
    console.log(`⚠️  ${script} not yet implemented. Using available alternative...`);
    
    // Fallback mappings for missing scripts
    const fallbacks = {
      'lib/scaffold-feature.mjs': 'lib/orch-start-real.mjs',
      'lib/interactive-setup.mjs': 'lib/orch-agents.mjs',
      'lib/status-dashboard.mjs': 'lib/orch-agents.mjs',
      'lib/preflight-check.mjs': 'scripts/health-check.mjs',
      'lib/batch-operations.mjs': 'lib/orch-start-real.mjs',
      'lib/task-decomposer.mjs': 'lib/orch-agents.mjs'
    };
    
    const fallback = fallbacks[script];
    if (fallback) {
      const fallbackPath = path.join(__dirname, fallback);
      if (fs.existsSync(fallbackPath)) {
        console.log(`Using: ${fallback}`);
        const child = spawn('node', [fallbackPath, ...args], { 
          stdio: 'inherit',
          cwd: __dirname
        });
        
        child.on('exit', (code) => process.exit(code || 0));
        return;
      }
    }
    
    console.log(`❌ Feature not available yet.`);
    process.exit(1);
  }
  
  const child = spawn('node', [scriptPath, ...args], { 
    stdio: 'inherit',
    cwd: __dirname
  });
  
  child.on('exit', (code) => process.exit(code || 0));
}

// Handle errors
process.on('unhandledRejection', (err) => {
  console.error('Error:', err);
  process.exit(1);
});

// Run if not help
if (!userInput || userInput === 'help' || userInput === '--help' || userInput === '-h') {
  commandMappings.help();
} else {
  main().catch(err => {
    console.error('Error:', err);
    process.exit(1);
  });
}