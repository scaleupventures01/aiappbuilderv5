// Enhanced TypeScript types for the Elite Trading Coach AI Chat System
// Generated by comprehensive analysis across all 34 ORCH team domains

export interface User {
  id: string;
  email: string;
  name: string;
  avatar?: string;
  status: 'online' | 'offline' | 'away' | 'busy';
  lastSeen: string;
  preferences: UserPreferences;
  createdAt: string;
  updatedAt: string;
}

export interface UserPreferences {
  theme: 'light' | 'dark' | 'auto';
  notifications: NotificationSettings;
  chat: ChatPreferences;
  privacy: PrivacySettings;
}

export interface NotificationSettings {
  enabled: boolean;
  sound: boolean;
  desktop: boolean;
  email: boolean;
  types: {
    messages: boolean;
    mentions: boolean;
    aiResponses: boolean;
    tradingAlerts: boolean;
  };
}

export interface ChatPreferences {
  autoScroll: boolean;
  showTimestamps: boolean;
  showReadReceipts: boolean;
  enableTypingIndicators: boolean;
  messageGrouping: boolean;
  fontSize: 'small' | 'medium' | 'large';
  compactMode: boolean;
}

export interface PrivacySettings {
  showOnlineStatus: boolean;
  shareTypingStatus: boolean;
  dataRetention: 'forever' | '1year' | '6months' | '3months';
  allowAnalytics: boolean;
}

// Core message types
export interface BaseMessage {
  id: string;
  conversationId: string;
  userId: string;
  content: string;
  type: MessageType;
  status: MessageStatus;
  metadata: MessageMetadata;
  createdAt: string;
  updatedAt: string;
  editedAt?: string;
  deletedAt?: string;
}

export type MessageType = 
  | 'user' 
  | 'ai' 
  | 'system' 
  | 'trading_alert' 
  | 'psychology_insight'
  | 'market_analysis'
  | 'trade_recommendation';

export type MessageStatus = 
  | 'sending' 
  | 'sent' 
  | 'delivered' 
  | 'read' 
  | 'failed' 
  | 'cancelled';

export interface MessageMetadata {
  attachments?: Attachment[];
  mentions?: string[];
  reactions?: Reaction[];
  threadId?: string;
  replyToId?: string;
  editHistory?: EditHistory[];
  aiContext?: AIContext;
  tradingContext?: TradingContext;
  sentiment?: SentimentAnalysis;
  priority?: MessagePriority;
  source?: string;
  deviceInfo?: DeviceInfo;
  clientVersion?: string;
  encrypted?: boolean;
  // Trade Analysis Verdict Support
  type?: 'analysis' | 'message' | 'system' | 'notification';
  verdict?: 'Diamond' | 'Fire' | 'Skull';
  confidence?: number;
  reasoning?: string;
  processingTime?: number;
  chartImage?: string;
  analysisId?: string;
  speedMode?: string;
  responseTime?: number;
  estimatedCost?: number;
  targetTime?: number;
  [key: string]: any;
}

export type MessagePriority = 'low' | 'normal' | 'high' | 'urgent';

export interface Attachment {
  id: string;
  name: string;
  type: AttachmentType;
  url: string;
  thumbnailUrl?: string;
  size: number;
  mimeType: string;
  metadata: AttachmentMetadata;
  uploadedAt: string;
  expiresAt?: string;
}

export type AttachmentType = 
  | 'image' 
  | 'video' 
  | 'audio' 
  | 'document' 
  | 'chart' 
  | 'trading_data'
  | 'screenshot';

export interface AttachmentMetadata {
  width?: number;
  height?: number;
  duration?: number;
  description?: string;
  alt?: string;
  tradingSymbol?: string;
  timeframe?: string;
  [key: string]: any;
}

export interface Reaction {
  id: string;
  emoji: string;
  userId: string;
  createdAt: string;
}

export interface EditHistory {
  id: string;
  previousContent: string;
  editedAt: string;
  reason?: string;
}

export interface AIContext {
  model: string;
  version: string;
  promptTokens: number;
  completionTokens: number;
  confidence: number;
  reasoning?: string[];
  sources?: string[];
  tradingRelevance: number;
  psychologyRelevance: number;
  riskLevel?: 'low' | 'medium' | 'high';
  disclaimers?: string[];
}

export interface TradingContext {
  symbol?: string;
  market?: string;
  timeframe?: string;
  strategy?: string;
  riskLevel?: number;
  position?: {
    type: 'long' | 'short';
    size: number;
    entryPrice: number;
    currentPrice: number;
    pnl: number;
  };
  indicators?: {
    [key: string]: any;
  };
  marketConditions?: {
    trend: 'bullish' | 'bearish' | 'sideways';
    volatility: 'low' | 'medium' | 'high';
    volume: 'low' | 'average' | 'high';
  };
}

export interface SentimentAnalysis {
  score: number; // -1 to 1
  magnitude: number; // 0 to 1
  emotion: 'fear' | 'greed' | 'confidence' | 'uncertainty' | 'neutral';
  tradingMood: 'bullish' | 'bearish' | 'neutral';
  confidence: number;
}

export interface DeviceInfo {
  platform: string;
  userAgent: string;
  screenSize: { width: number; height: number };
  timezone: string;
  language: string;
}

// Message interface extending BaseMessage
export interface Message extends BaseMessage {
  user?: User;
  conversation?: Conversation;
  thread?: Thread;
  replyTo?: Message;
  replies?: Message[];
  readBy?: ReadReceipt[];
}

export interface ReadReceipt {
  userId: string;
  readAt: string;
  user?: User;
}

// Conversation types
export interface Conversation {
  id: string;
  title: string;
  description?: string;
  type: ConversationType;
  status: ConversationStatus;
  participants: Participant[];
  settings: ConversationSettings;
  metadata: ConversationMetadata;
  createdAt: string;
  updatedAt: string;
  lastMessageAt?: string;
  archivedAt?: string;
}

export type ConversationType = 
  | 'direct' 
  | 'ai_coaching' 
  | 'group' 
  | 'trading_room' 
  | 'psychology_session';

export type ConversationStatus = 
  | 'active' 
  | 'archived' 
  | 'deleted' 
  | 'muted' 
  | 'blocked';

export interface Participant {
  id: string;
  userId: string;
  role: ParticipantRole;
  joinedAt: string;
  lastSeenAt?: string;
  permissions: ParticipantPermissions;
  user?: User;
}

export type ParticipantRole = 
  | 'owner' 
  | 'admin' 
  | 'moderator' 
  | 'member' 
  | 'guest' 
  | 'ai_coach';

export interface ParticipantPermissions {
  canRead: boolean;
  canWrite: boolean;
  canDelete: boolean;
  canInvite: boolean;
  canModerate: boolean;
  canArchive: boolean;
}

export interface ConversationSettings {
  isPublic: boolean;
  allowInvites: boolean;
  allowFiles: boolean;
  retentionDays?: number;
  autoArchiveDays?: number;
  notificationsEnabled: boolean;
  aiCoachEnabled: boolean;
  tradingInsightsEnabled: boolean;
  psychologyInsightsEnabled: boolean;
}

export interface ConversationMetadata {
  tags?: string[];
  category?: string;
  priority?: ConversationPriority;
  tradingSymbols?: string[];
  strategies?: string[];
  totalMessages: number;
  messageCountByType: Record<MessageType, number>;
  averageResponseTime?: number;
  sentimentTrend?: SentimentTrend[];
  aiInsights?: AIInsights;
  [key: string]: any;
}

export type ConversationPriority = 'low' | 'normal' | 'high' | 'urgent';

export interface SentimentTrend {
  date: string;
  sentiment: number;
  confidence: number;
}

export interface AIInsights {
  topics: TopicAnalysis[];
  emotionalState: EmotionalStateAnalysis;
  tradingPerformance: TradingPerformanceInsights;
  recommendations: AIRecommendation[];
  riskAssessment: RiskAssessment;
}

export interface TopicAnalysis {
  topic: string;
  relevance: number;
  frequency: number;
  sentiment: number;
  keywords: string[];
}

export interface EmotionalStateAnalysis {
  currentState: string;
  trend: 'improving' | 'declining' | 'stable';
  confidence: number;
  factors: string[];
  recommendations: string[];
}

export interface TradingPerformanceInsights {
  winRate: number;
  averageReturn: number;
  riskRewardRatio: number;
  consistencyScore: number;
  strengths: string[];
  weaknesses: string[];
  patterns: TradingPattern[];
}

export interface TradingPattern {
  pattern: string;
  frequency: number;
  successRate: number;
  description: string;
}

export interface AIRecommendation {
  id: string;
  type: 'trading' | 'psychology' | 'education' | 'risk_management';
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  confidence: number;
  actionItems: string[];
  createdAt: string;
  expiresAt?: string;
}

export interface RiskAssessment {
  overall: 'low' | 'medium' | 'high' | 'extreme';
  factors: RiskFactor[];
  mitigation: string[];
  monitoring: string[];
  lastUpdated: string;
}

export interface RiskFactor {
  category: string;
  severity: 'low' | 'medium' | 'high';
  description: string;
  impact: string;
  likelihood: number;
}

// Thread support
export interface Thread {
  id: string;
  parentMessageId: string;
  conversationId: string;
  title?: string;
  participants: string[];
  messageCount: number;
  lastMessageAt: string;
  createdAt: string;
  updatedAt: string;
}

// Real-time events
export interface TypingIndicator {
  userId: string;
  conversationId: string;
  isTyping: boolean;
  timestamp: number;
  user?: User;
}

export interface PresenceUpdate {
  userId: string;
  status: 'online' | 'offline' | 'away' | 'busy';
  lastSeen: string;
  user?: User;
}

export interface MessageEvent {
  type: 'message' | 'edit' | 'delete' | 'reaction' | 'read';
  messageId: string;
  conversationId: string;
  userId: string;
  data: any;
  timestamp: number;
}

// API Response types
export interface ApiResponse<T> {
  success: boolean;
  data: T;
  error?: string;
  metadata?: {
    timestamp: number;
    requestId: string;
    version: string;
  };
}

export interface PaginatedResponse<T> {
  success: boolean;
  data: {
    items: T[];
    pagination: {
      total: number;
      limit: number;
      offset: number;
      hasMore: boolean;
    };
  };
  error?: string;
}

// Search and filter types
export interface MessageSearchFilter {
  query?: string;
  type?: MessageType[];
  userId?: string[];
  dateFrom?: string;
  dateTo?: string;
  hasAttachments?: boolean;
  sentiment?: 'positive' | 'negative' | 'neutral';
  priority?: MessagePriority[];
  tradingSymbols?: string[];
}

export interface ConversationSearchFilter {
  query?: string;
  type?: ConversationType[];
  status?: ConversationStatus[];
  participantId?: string;
  tags?: string[];
  priority?: ConversationPriority[];
  dateFrom?: string;
  dateTo?: string;
}

export interface SearchResults<T> {
  items: T[];
  total: number;
  facets: SearchFacets;
  suggestions: string[];
  took: number;
}

export interface SearchFacets {
  types: { [key: string]: number };
  users: { [key: string]: number };
  dates: { [key: string]: number };
  tags: { [key: string]: number };
}

// Analytics types
export interface ChatAnalytics {
  overview: AnalyticsOverview;
  usage: UsageAnalytics;
  performance: PerformanceAnalytics;
  ai: AIAnalytics;
  trading: TradingAnalytics;
  psychology: PsychologyAnalytics;
}

export interface AnalyticsOverview {
  totalMessages: number;
  totalConversations: number;
  activeUsers: number;
  averageResponseTime: number;
  satisfaction: number;
  period: AnalyticsPeriod;
}

export interface AnalyticsPeriod {
  start: string;
  end: string;
  interval: 'hour' | 'day' | 'week' | 'month';
}

export interface UsageAnalytics {
  messagesByType: { [key in MessageType]: number };
  messagesByHour: { hour: number; count: number }[];
  topUsers: { userId: string; messageCount: number; user?: User }[];
  conversationActivity: { date: string; count: number }[];
  attachmentUsage: { type: AttachmentType; count: number; size: number }[];
}

export interface PerformanceAnalytics {
  averageLoadTime: number;
  messageDeliveryRate: number;
  errorRate: number;
  uptime: number;
  latencyPercentiles: { p50: number; p95: number; p99: number };
  throughput: { messages: number; requests: number };
}

export interface AIAnalytics {
  responseAccuracy: number;
  userSatisfaction: number;
  responseTime: number;
  topTopics: { topic: string; frequency: number }[];
  improvementSuggestions: string[];
  modelPerformance: { model: string; accuracy: number; speed: number }[];
}

export interface TradingAnalytics {
  tradingMentions: { symbol: string; count: number }[];
  strategyDiscussions: { strategy: string; count: number }[];
  performanceMetrics: { metric: string; value: number }[];
  riskAssessments: { level: string; count: number }[];
  successfulTrades: number;
  totalTrades: number;
}

export interface PsychologyAnalytics {
  emotionalTrends: { date: string; emotion: string; intensity: number }[];
  behaviorPatterns: { pattern: string; frequency: number }[];
  progressMetrics: { metric: string; value: number; target: number }[];
  interventionSuccess: { intervention: string; successRate: number }[];
  stressLevels: { date: string; level: number }[];
}

// WebSocket event types
export interface WebSocketEvent {
  type: WebSocketEventType;
  data: any;
  timestamp: number;
  id: string;
}

export type WebSocketEventType =
  | 'message'
  | 'message_edit'
  | 'message_delete'
  | 'typing_start'
  | 'typing_stop'
  | 'presence_update'
  | 'conversation_update'
  | 'reaction_add'
  | 'reaction_remove'
  | 'read_receipt'
  | 'ai_response_start'
  | 'ai_response_chunk'
  | 'ai_response_complete'
  | 'trading_alert'
  | 'system_notification';

// Error types
export interface ChatError {
  code: string;
  message: string;
  details?: any;
  timestamp: number;
  requestId?: string;
  retryable: boolean;
}

export type ChatErrorCode =
  | 'NETWORK_ERROR'
  | 'AUTHENTICATION_ERROR'
  | 'AUTHORIZATION_ERROR'
  | 'VALIDATION_ERROR'
  | 'RATE_LIMIT_ERROR'
  | 'SERVER_ERROR'
  | 'UNKNOWN_ERROR';

// Component prop types
export interface ChatContainerProps {
  conversationId?: string;
  className?: string;
  onMessageSent?: (message: Message) => void;
  onError?: (error: ChatError) => void;
  theme?: 'light' | 'dark';
  compact?: boolean;
}

export interface MessageListProps {
  messages: Message[];
  isTyping?: boolean;
  onLoadMore?: () => Promise<void>;
  hasMore?: boolean;
  virtualized?: boolean;
  className?: string;
  onMessageClick?: (message: Message) => void;
  onMessageReact?: (messageId: string, emoji: string) => void;
}

export interface MessageInputProps {
  onSendMessage: (content: string, metadata?: Partial<MessageMetadata>) => Promise<void>;
  disabled?: boolean;
  placeholder?: string;
  maxLength?: number;
  allowAttachments?: boolean;
  allowMentions?: boolean;
  className?: string;
  onTyping?: (isTyping: boolean) => void;
}

export interface MessageBubbleProps {
  message: Message;
  showTimestamp?: boolean;
  showAvatar?: boolean;
  compact?: boolean;
  className?: string;
  onReact?: (emoji: string) => void;
  onReply?: () => void;
  onEdit?: () => void;
  onDelete?: () => void;
}

// Store types
export interface ChatStoreState {
  // Core state
  messages: Message[];
  conversations: Conversation[];
  currentConversation: Conversation | null;
  activeUsers: User[];
  
  // UI state
  isLoading: boolean;
  error: ChatError | null;
  isTyping: boolean;
  typingUsers: TypingIndicator[];
  
  // Connection state
  connectionStatus: 'connected' | 'connecting' | 'disconnected' | 'reconnecting';
  lastConnected: number | null;
  
  // Performance state
  messageCache: Map<string, Message[]>;
  optimisticMessages: Map<string, Message>;
  
  // Analytics state
  analytics: ChatAnalytics | null;
  metrics: PerformanceAnalytics | null;
}

// Configuration types
export interface ChatConfig {
  apiUrl: string;
  wsUrl: string;
  maxMessageLength: number;
  maxFileSize: number;
  allowedFileTypes: string[];
  virtualScrollThreshold: number;
  cacheSize: number;
  retryAttempts: number;
  retryDelay: number;
  heartbeatInterval: number;
  typingTimeout: number;
  features: {
    virtualScrolling: boolean;
    messageReactions: boolean;
    fileUploads: boolean;
    voiceMessages: boolean;
    videoMessages: boolean;
    messageThreads: boolean;
    messageSearch: boolean;
    aiInsights: boolean;
    tradingIntegration: boolean;
    psychologyInsights: boolean;
  };
}

// All types are exported individually above