/**
 * Express Server - Elite Trading Coach AI
 * API Server Setup with User Authentication Endpoints
 * Created: 2025-08-14
 * 
 * Demonstrates integration of user registration, authentication, and profile management
 * endpoints with proper middleware setup and security configurations.
 */

import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import cookieParser from 'cookie-parser';
import { config } from 'dotenv';

// Load environment variables
config();

// Import route modules
import registerRoutes from './api/users/register.js';
import authRoutes from './api/auth/login.js';
import profileRoutes from './api/users/profile.js';
import conversationRoutes from './api/conversations/index.js';
import messageRoutes from './api/messages/index.js';

// Import middleware
import { securityHeaders } from './middleware/auth.js';

const app = express();
const PORT = process.env.PORT || 3001;

// Security middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ['\'self\''],
      scriptSrc: ['\'self\'', '\'unsafe-inline\''],
      styleSrc: ['\'self\'', '\'unsafe-inline\''],
      imgSrc: ['\'self\'', 'data:', 'https:'],
      connectSrc: ['\'self\''],
      fontSrc: ['\'self\''],
      objectSrc: ['\'none\''],
      mediaSrc: ['\'self\''],
      frameSrc: ['\'none\''],
    },
  },
  crossOriginEmbedderPolicy: false
}));

// CORS configuration
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:3000',
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
app.use(cookieParser());

// Custom security headers
app.use(securityHeaders);

// Request logging middleware
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path} - IP: ${req.ip}`);
  next();
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    success: true,
    message: 'Elite Trading Coach AI API is running',
    timestamp: new Date().toISOString(),
    version: process.env.npm_package_version || '1.0.0'
  });
});

// Database health check
app.get('/health/db', async (req, res) => {
  try {
    const { query } = await import('./db/connection.js');
    const result = await query('SELECT NOW() as current_time, version() as db_version');
        
    res.json({
      success: true,
      message: 'Database connection healthy',
      data: {
        current_time: result.rows[0].current_time,
        db_version: result.rows[0].db_version,
        connected: true
      }
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: 'Database connection failed',
      error: error.message
    });
  }
});

// API Routes
app.use('/api/users', registerRoutes);
app.use('/api/auth', authRoutes);
app.use('/api/users', profileRoutes);
app.use('/api/conversations', conversationRoutes);
app.use('/api/messages', messageRoutes);

// API documentation endpoint
app.get('/api', (req, res) => {
  res.json({
    success: true,
    message: 'Elite Trading Coach AI API',
    version: '1.0.0',
    endpoints: {
      authentication: {
        'POST /api/users/register': 'Register new user account',
        'GET /api/users/check-availability': 'Check email/username availability',
        'POST /api/users/password-strength': 'Check password strength',
        'POST /api/auth/login': 'User login with JWT tokens',
        'POST /api/auth/refresh': 'Refresh access token',
        'POST /api/auth/logout': 'User logout',
        'GET /api/auth/me': 'Get current user info',
        'POST /api/auth/verify-token': 'Verify token validity'
      },
      profile: {
        'GET /api/users/profile': 'Get current user profile',
        'GET /api/users/profile/:userId': 'Get specific user profile',
        'PUT /api/users/profile': 'Update current user profile',
        'PUT /api/users/profile/:userId': 'Update specific user profile',
        'PUT /api/users/profile/:userId/password': 'Update user password',
        'DELETE /api/users/profile/:userId': 'Delete user account'
      },
      conversations: {
        'POST /api/conversations': 'Create new conversation',
        'GET /api/conversations': 'List user conversations',
        'GET /api/conversations/:id': 'Get conversation details',
        'PUT /api/conversations/:id': 'Update conversation',
        'DELETE /api/conversations/:id': 'Delete conversation',
        'POST /api/conversations/:id/archive': 'Archive conversation',
        'POST /api/conversations/:id/restore': 'Restore conversation',
        'GET /api/conversations/search': 'Search conversations',
        'GET /api/conversations/stats': 'Get conversation statistics'
      },
      messages: {
        'POST /api/messages': 'Create new message',
        'GET /api/messages/:id': 'Get message details',
        'PUT /api/messages/:id': 'Update message',
        'DELETE /api/messages/:id': 'Delete message',
        'GET /api/messages/conversation/:id': 'Get conversation messages',
        'GET /api/messages/search': 'Full-text search messages',
        'GET /api/messages/:id/thread': 'Get message thread',
        'GET /api/messages/:id/children': 'Get child messages',
        'GET /api/messages/verdict/:verdict': 'Get messages by AI verdict',
        'GET /api/messages/psychology': 'Get psychology messages',
        'GET /api/messages/stats': 'Get message statistics'
      },
      system: {
        'GET /health': 'API health check',
        'GET /health/db': 'Database health check',
        'GET /api': 'API documentation'
      }
    },
    security: {
      authentication: 'JWT Bearer tokens',
      rate_limiting: 'Applied to all endpoints',
      cors: 'Configured for frontend integration',
      headers: 'Security headers applied',
      validation: 'Input validation on all endpoints'
    }
  });
});

// 404 handler for API routes
app.use('/api/*', (req, res) => {
  res.status(404).json({
    success: false,
    error: 'API endpoint not found',
    code: 'ENDPOINT_NOT_FOUND',
    path: req.path
  });
});

// Global error handler
app.use((error, req, res, next) => {
  console.error('Unhandled error:', error);
    
  // Don't leak error details in production
  const errorMessage = process.env.NODE_ENV === 'production' 
    ? 'Internal server error' 
    : error.message;
    
  res.status(500).json({
    success: false,
    error: errorMessage,
    code: 'INTERNAL_SERVER_ERROR',
    ...(process.env.NODE_ENV === 'development' && { 
      stack: error.stack,
      details: error 
    })
  });
});

// Graceful shutdown handler
process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down gracefully');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('SIGINT received, shutting down gracefully');
  process.exit(0);
});

// Start server
if (process.env.NODE_ENV !== 'test') {
  app.listen(PORT, '0.0.0.0', () => {
    console.log(`
🚀 Elite Trading Coach AI API Server Started
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📡 Port: ${PORT}
🌍 Environment: ${process.env.NODE_ENV || 'development'}
🔒 CORS Origin: ${process.env.FRONTEND_URL || 'http://localhost:3000'}
📊 Health Check: http://localhost:${PORT}/health
📚 API Docs: http://localhost:${PORT}/api
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
        `);
  });
}

export default app;