#!/bin/bash

# Credential Exposure Penetration Testing Script
# Tests for credential exposure vulnerabilities in the Elite Trading Coach AI application

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Configuration
TARGET_URL="${TARGET_URL:-http://localhost:3001}"
OUTPUT_DIR="./pentest-results-$(date +%Y%m%d-%H%M%S)"
REPORT_FILE="$OUTPUT_DIR/credential-exposure-pentest-report.md"

echo -e "${PURPLE}üïµÔ∏è Credential Exposure Penetration Testing${NC}"
echo "============================================="
echo "Target: $TARGET_URL"
echo "Output Directory: $OUTPUT_DIR"
echo ""

# Create output directory
mkdir -p "$OUTPUT_DIR"

# Function to log test results
log_test() {
    local test_name="$1"
    local status="$2"
    local details="$3"
    
    echo "$(date '+%Y-%m-%d %H:%M:%S') | $test_name | $status | $details" >> "$OUTPUT_DIR/test-log.txt"
}

# Function to perform HTTP request and capture response
test_endpoint() {
    local method="$1"
    local endpoint="$2"
    local data="$3"
    local headers="$4"
    local test_name="$5"
    
    echo -e "${BLUE}üîç Testing: $test_name${NC}"
    echo "Endpoint: $method $endpoint"
    
    local response_file="$OUTPUT_DIR/response-$(echo "$test_name" | tr ' ' '_' | tr '[:upper:]' '[:lower:]').txt"
    local status_code
    
    if [ -n "$data" ]; then
        status_code=$(curl -s -w "%{http_code}" -X "$method" "$TARGET_URL$endpoint" \
            -H "Content-Type: application/json" \
            -H "$headers" \
            -d "$data" \
            -o "$response_file" 2>/dev/null || echo "000")
    else
        status_code=$(curl -s -w "%{http_code}" -X "$method" "$TARGET_URL$endpoint" \
            -H "$headers" \
            -o "$response_file" 2>/dev/null || echo "000")
    fi
    
    echo "Status Code: $status_code"
    
    # Analyze response for credential exposure
    local credentials_found=""
    if grep -qi "api[_-]key\|password\|secret\|token\|sk-" "$response_file" 2>/dev/null; then
        credentials_found="POTENTIAL_EXPOSURE"
        echo -e "${RED}‚ùå VULNERABILITY: Potential credential exposure detected${NC}"
        echo "Response preview:"
        head -5 "$response_file" | sed 's/^/  /'
    elif grep -qi "error\|exception\|stack" "$response_file" 2>/dev/null; then
        credentials_found="ERROR_RESPONSE"
        echo -e "${YELLOW}‚ö†Ô∏è WARNING: Error response detected (check for information disclosure)${NC}"
    else
        credentials_found="CLEAN"
        echo -e "${GREEN}‚úÖ SAFE: No credential exposure detected${NC}"
    fi
    
    log_test "$test_name" "$credentials_found" "HTTP $status_code"
    echo ""
    
    return 0
}

# Function to test environment variable exposure
test_env_exposure() {
    echo -e "${BLUE}üåç Testing Environment Variable Exposure${NC}"
    
    # Test common endpoints that might expose environment info
    local endpoints=(
        "/debug"
        "/env"
        "/config"
        "/info"
        "/status"
        "/health/debug"
        "/.env"
        "/admin/config"
        "/api/debug"
        "/api/config"
        "/api/env"
    )
    
    for endpoint in "${endpoints[@]}"; do
        test_endpoint "GET" "$endpoint" "" "" "Environment Exposure - $endpoint"
    done
}

# Function to test API key exposure in error messages
test_api_key_errors() {
    echo -e "${BLUE}üîë Testing API Key Exposure in Error Messages${NC}"
    
    # Test with invalid API key scenarios
    test_endpoint "POST" "/api/analyze-trade" \
        '{"prompt":"test","image":"invalid"}' \
        "Authorization: Bearer invalid-token" \
        "Invalid Auth Token Error"
    
    # Test missing API key
    test_endpoint "POST" "/api/analyze-trade" \
        '{"prompt":"test"}' \
        "" \
        "Missing Auth Token Error"
    
    # Test malformed requests
    test_endpoint "POST" "/api/analyze-trade" \
        'invalid-json' \
        "Authorization: Bearer test-token" \
        "Malformed JSON Error"
    
    # Test SQL injection attempts (to check error handling)
    test_endpoint "POST" "/api/auth/login" \
        '{"email":"admin'\''OR 1=1--","password":"test"}' \
        "" \
        "SQL Injection Attempt"
}

# Function to test JWT secret exposure
test_jwt_exposure() {
    echo -e "${BLUE}üîê Testing JWT Secret Exposure${NC}"
    
    # Test with malformed JWT tokens
    local malformed_tokens=(
        "invalid.jwt.token"
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.invalid"
        "Bearer "
        "JWT "
        ""
    )
    
    for token in "${malformed_tokens[@]}"; do
        test_endpoint "GET" "/api/user/profile" \
            "" \
            "Authorization: Bearer $token" \
            "JWT Exposure - Token: ${token:0:20}..."
    done
}

# Function to test configuration file exposure
test_config_exposure() {
    echo -e "${BLUE}üìÅ Testing Configuration File Exposure${NC}"
    
    # Test common configuration files
    local config_files=(
        "/.env"
        "/.env.production"
        "/.env.development"
        "/.env.local"
        "/config.json"
        "/config.js"
        "/package.json"
        "/docker-compose.yml"
        "/railway.json"
        "/secrets.json"
        "/keys.json"
    )
    
    for file in "${config_files[@]}"; do
        test_endpoint "GET" "$file" "" "" "Config File Exposure - $file"
    done
}

# Function to test debug endpoint exposure
test_debug_exposure() {
    echo -e "${BLUE}üêõ Testing Debug Endpoint Exposure${NC}"
    
    # Test debug endpoints with various methods
    local debug_endpoints=(
        "/debug"
        "/debug/config"
        "/debug/env"
        "/debug/vars"
        "/admin/debug"
        "/dev/debug"
        "/__debug"
        "/api/debug"
        "/health/verbose"
    )
    
    for endpoint in "${debug_endpoints[@]}"; do
        test_endpoint "GET" "$endpoint" "" "" "Debug Endpoint - GET $endpoint"
        test_endpoint "POST" "$endpoint" '{}' "" "Debug Endpoint - POST $endpoint"
    done
}

# Function to test HTTP headers for credential leakage
test_header_exposure() {
    echo -e "${BLUE}üìã Testing HTTP Header Credential Exposure${NC}"
    
    local response_file="$OUTPUT_DIR/headers-test.txt"
    
    # Get response headers
    curl -s -I "$TARGET_URL/api/health" > "$response_file" 2>/dev/null || true
    
    echo "Response Headers Analysis:"
    if grep -qi "api[_-]key\|secret\|password\|token\|sk-" "$response_file" 2>/dev/null; then
        echo -e "${RED}‚ùå VULNERABILITY: Credentials found in response headers${NC}"
        grep -i "api[_-]key\|secret\|password\|token\|sk-" "$response_file" | sed 's/^/  /'
        log_test "HTTP Headers" "VULNERABILITY" "Credentials in headers"
    else
        echo -e "${GREEN}‚úÖ SAFE: No credentials found in response headers${NC}"
        log_test "HTTP Headers" "SAFE" "No credentials detected"
    fi
    
    # Check for information disclosure in headers
    echo "Information Disclosure Check:"
    if grep -qi "server\|x-powered-by\|x-aspnet-version" "$response_file" 2>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è WARNING: Server information disclosed${NC}"
        grep -i "server\|x-powered-by\|x-aspnet-version" "$response_file" | sed 's/^/  /'
    else
        echo -e "${GREEN}‚úÖ GOOD: Minimal server information disclosed${NC}"
    fi
    
    echo ""
}

# Function to test source code exposure
test_source_exposure() {
    echo -e "${BLUE}üìÑ Testing Source Code Exposure${NC}"
    
    # Test common source code files
    local source_files=(
        "/server.js"
        "/app.js"
        "/index.js"
        "/config/openai.js"
        "/middleware/auth.js"
        "/package.json"
        "/package-lock.json"
        "/.git/config"
        "/.git/HEAD"
        "/src/config/environment.ts"
        "/dist/main.js"
    )
    
    for file in "${source_files[@]}"; do
        test_endpoint "GET" "$file" "" "" "Source Code Exposure - $file"
    done
}

# Function to test backup file exposure
test_backup_exposure() {
    echo -e "${BLUE}üíæ Testing Backup File Exposure${NC}"
    
    # Test common backup file patterns
    local backup_files=(
        "/.env.backup"
        "/.env.bak"
        "/config.backup"
        "/database.sql"
        "/backup.sql"
        "/dump.sql"
        "/secrets.backup"
        "/keys.backup"
        "/.env~"
        "/config.js~"
    )
    
    for file in "${backup_files[@]}"; do
        test_endpoint "GET" "$file" "" "" "Backup File Exposure - $file"
    done
}

# Function to test logging endpoint exposure
test_log_exposure() {
    echo -e "${BLUE}üìù Testing Log File Exposure${NC}"
    
    # Test log file endpoints
    local log_endpoints=(
        "/logs"
        "/log"
        "/debug.log"
        "/error.log"
        "/access.log"
        "/application.log"
        "/server.log"
        "/api/logs"
        "/admin/logs"
    )
    
    for endpoint in "${log_endpoints[@]}"; do
        test_endpoint "GET" "$endpoint" "" "" "Log Exposure - $endpoint"
    done
}

# Function to perform automated credential pattern scanning
automated_pattern_scan() {
    echo -e "${BLUE}ü§ñ Automated Credential Pattern Scanning${NC}"
    
    # Scan all captured responses for credential patterns
    local patterns=(
        "sk-[a-zA-Z0-9]{48}"  # OpenAI API keys
        "AKIA[0-9A-Z]{16}"    # AWS Access Keys
        "ghp_[a-zA-Z0-9]{36}" # GitHub Personal Access Tokens
        "[0-9a-f]{32}"        # MD5 hashes (potential secrets)
        "eyJ[a-zA-Z0-9_-]*\.[a-zA-Z0-9_-]*\.[a-zA-Z0-9_-]*" # JWT tokens
        "password[\"':\\s]*[\"'][^\"']{8,}[\"']" # Password strings
        "secret[\"':\\s]*[\"'][^\"']{8,}[\"']"   # Secret strings
        "api[_-]?key[\"':\\s]*[\"'][^\"']{8,}[\"']" # API key strings
    )
    
    local total_matches=0
    local scan_results="$OUTPUT_DIR/credential-patterns.txt"
    
    echo "Scanning captured responses for credential patterns..."
    echo "# Credential Pattern Scan Results" > "$scan_results"
    echo "Generated: $(date)" >> "$scan_results"
    echo "" >> "$scan_results"
    
    for pattern in "${patterns[@]}"; do
        echo "Scanning for pattern: $pattern"
        local matches=$(grep -r -E "$pattern" "$OUTPUT_DIR" 2>/dev/null | wc -l || echo "0")
        
        if [ "$matches" -gt 0 ]; then
            echo -e "${RED}‚ùå FOUND: $matches matches for pattern $pattern${NC}"
            echo "## Pattern: $pattern" >> "$scan_results"
            echo "Matches: $matches" >> "$scan_results"
            grep -r -E "$pattern" "$OUTPUT_DIR" 2>/dev/null | head -5 >> "$scan_results" || true
            echo "" >> "$scan_results"
            total_matches=$((total_matches + matches))
        else
            echo -e "${GREEN}‚úÖ CLEAN: No matches for pattern $pattern${NC}"
        fi
    done
    
    echo ""
    echo "Total credential pattern matches: $total_matches"
    log_test "Automated Pattern Scan" "$total_matches matches" "Various patterns"
    
    if [ "$total_matches" -gt 0 ]; then
        echo -e "${RED}üö® CRITICAL: Potential credentials detected in responses${NC}"
        echo "Review $scan_results for details"
    else
        echo -e "${GREEN}‚úÖ EXCELLENT: No credential patterns detected${NC}"
    fi
    
    echo ""
}

# Function to generate comprehensive report
generate_pentest_report() {
    echo -e "${BLUE}üìä Generating Penetration Testing Report${NC}"
    
    cat > "$REPORT_FILE" << EOF
# Credential Exposure Penetration Testing Report

**Target Application**: Elite Trading Coach AI  
**Test Date**: $(date)  
**Tester**: $(whoami)  
**Target URL**: $TARGET_URL  

## Executive Summary

This penetration test focused specifically on identifying credential exposure vulnerabilities in the Elite Trading Coach AI application. The test covered various attack vectors including:

- Environment variable exposure
- API key leakage in error messages
- JWT secret exposure
- Configuration file access
- Debug endpoint exposure
- HTTP header information disclosure
- Source code exposure
- Backup file access
- Log file exposure
- Automated credential pattern scanning

## Test Results Summary

EOF

    # Count vulnerabilities by severity
    local critical_count=$(grep -c "POTENTIAL_EXPOSURE\|VULNERABILITY" "$OUTPUT_DIR/test-log.txt" 2>/dev/null || echo "0")
    local warning_count=$(grep -c "ERROR_RESPONSE\|WARNING" "$OUTPUT_DIR/test-log.txt" 2>/dev/null || echo "0")
    local safe_count=$(grep -c "CLEAN\|SAFE" "$OUTPUT_DIR/test-log.txt" 2>/dev/null || echo "0")
    
    cat >> "$REPORT_FILE" << EOF
| Severity | Count | Description |
|----------|-------|-------------|
| üî¥ Critical | $critical_count | Potential credential exposure detected |
| üü° Warning | $warning_count | Information disclosure or error responses |
| üü¢ Safe | $safe_count | No vulnerabilities detected |

## Detailed Test Results

EOF

    # Add detailed test results
    echo "### Test Log Analysis" >> "$REPORT_FILE"
    echo '```' >> "$REPORT_FILE"
    cat "$OUTPUT_DIR/test-log.txt" >> "$REPORT_FILE" 2>/dev/null || echo "No test log available" >> "$REPORT_FILE"
    echo '```' >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
    
    # Add credential pattern results if they exist
    if [ -f "$OUTPUT_DIR/credential-patterns.txt" ]; then
        echo "### Credential Pattern Analysis" >> "$REPORT_FILE"
        cat "$OUTPUT_DIR/credential-patterns.txt" >> "$REPORT_FILE"
        echo "" >> "$REPORT_FILE"
    fi
    
    cat >> "$REPORT_FILE" << EOF

## Recommendations

### Immediate Actions Required
1. **Review any identified credential exposures immediately**
2. **Rotate any exposed credentials**
3. **Implement additional input validation**
4. **Enhance error handling to prevent information disclosure**

### Security Improvements
1. **Implement proper secret management**
   - Use environment variables for all secrets
   - Implement secret rotation procedures
   - Use secure secret storage (HashiCorp Vault, AWS Secrets Manager)

2. **Enhance Error Handling**
   - Implement generic error messages for public-facing APIs
   - Log detailed errors securely on the server side
   - Never expose internal system information in error responses

3. **Access Controls**
   - Implement proper authentication for all endpoints
   - Use authorization checks for sensitive operations
   - Disable debug endpoints in production

4. **HTTP Security Headers**
   - Implement Content Security Policy (CSP)
   - Add X-Content-Type-Options: nosniff
   - Add X-Frame-Options: DENY
   - Remove server information headers

### Monitoring and Detection
1. **Implement security monitoring**
   - Monitor for unusual API access patterns
   - Alert on multiple failed authentication attempts
   - Log and monitor access to sensitive endpoints

2. **Regular Security Testing**
   - Conduct regular penetration testing
   - Implement automated security scanning
   - Perform code reviews focusing on security

## Risk Assessment

| Risk Factor | Level | Justification |
|-------------|-------|---------------|
| Credential Exposure | $([ "$critical_count" -gt 0 ] && echo "HIGH" || echo "LOW") | Based on detected exposures |
| Information Disclosure | $([ "$warning_count" -gt 5 ] && echo "MEDIUM" || echo "LOW") | Based on error responses |
| Attack Surface | MEDIUM | Multiple endpoints tested |
| Impact Potential | HIGH | Application handles sensitive trading data |

## Compliance Considerations

- **SOC 2**: Credential management controls required
- **GDPR**: Data protection measures must prevent credential exposure
- **Industry Best Practices**: Follow OWASP guidelines for secure development

## Technical Details

All test requests and responses have been captured in:
- Test log: \`$OUTPUT_DIR/test-log.txt\`
- Response files: \`$OUTPUT_DIR/response-*.txt\`
- Pattern scan results: \`$OUTPUT_DIR/credential-patterns.txt\`

## Next Steps

1. **Immediate**: Address any critical vulnerabilities found
2. **Short-term** (1-2 weeks): Implement recommended security improvements
3. **Medium-term** (1-3 months): Establish regular security testing process
4. **Long-term** (3-6 months): Implement comprehensive security monitoring

---
*Report generated by Credential Exposure Penetration Testing Script*  
*For questions or clarification, contact the security team*
EOF

    echo "‚úÖ Comprehensive penetration testing report generated: $REPORT_FILE"
    echo ""
}

# Main execution function
main() {
    echo "Starting comprehensive credential exposure penetration testing..."
    echo ""
    
    # Initialize test log
    echo "# Credential Exposure Penetration Test Log" > "$OUTPUT_DIR/test-log.txt"
    echo "Started: $(date)" >> "$OUTPUT_DIR/test-log.txt"
    echo "" >> "$OUTPUT_DIR/test-log.txt"
    
    # Run all test categories
    test_env_exposure
    test_api_key_errors
    test_jwt_exposure
    test_config_exposure
    test_debug_exposure
    test_header_exposure
    test_source_exposure
    test_backup_exposure
    test_log_exposure
    
    # Perform automated scanning
    automated_pattern_scan
    
    # Generate comprehensive report
    generate_pentest_report
    
    echo -e "${GREEN}üéØ Penetration testing completed successfully!${NC}"
    echo "üìÅ Results directory: $OUTPUT_DIR"
    echo "üìã Full report: $REPORT_FILE"
    echo ""
    echo "‚ö†Ô∏è  Please review all findings and take appropriate remediation actions."
}

# Handle command line arguments
case "${1:-}" in
    "quick")
        echo "Running quick credential exposure test..."
        test_api_key_errors
        test_config_exposure
        automated_pattern_scan
        ;;
    "headers-only")
        test_header_exposure
        ;;
    "debug-only")
        test_debug_exposure
        ;;
    "help")
        echo "Usage: $0 [quick|headers-only|debug-only|help]"
        echo ""
        echo "Options:"
        echo "  quick        - Run essential tests only"
        echo "  headers-only - Test HTTP headers only"
        echo "  debug-only   - Test debug endpoints only"
        echo "  help         - Show this help message"
        echo ""
        echo "Default: Run comprehensive penetration test"
        exit 0
        ;;
    *)
        main
        ;;
esac